name: Full Pipeline
kind: pipeline
type: docker

platform:
  os: linux
  arch: arm64

environment:
  SONAR_KEY_dev: "mycelium-local-dev"
  SONAR_KEY_uat: "mycelium-local-uat"
  SONAR_KEY_master: "mycelium-local-master"
  SONAR_NAME_dev: "Mycelium Local Dev"
  SONAR_NAME_uat: "Mycelium Local UAT"
  SONAR_NAME_master: "Mycelium Local Master"

steps:
  # - name: unit-testing
  #   image: gradle:7.5.1-jdk17
  #   commands:
  #     - cd api
  #     - gradle test --no-daemon --console plain

  # - name: sonarqube-api-analysis
  #   image: gradle:7.5.1-jdk17
  #   environment:
  #     SONAR_TOKEN:
  #       from_secret: sonarqube-user-token
  #   commands:
  #     - cd api

  #     - BUILT_SONAR_KEY="SONAR_KEY_${DRONE_BRANCH}"
  #     - eval "EVALED_SONAR_KEY=\$$$BUILT_SONAR_KEY"

  #     - BUILT_SONAR_NAME="SONAR_NAME_${DRONE_BRANCH}"
  #     - eval "EVALED_SONAR_NAME=\$$$BUILT_SONAR_NAME"

  #     - gradle sonar --no-daemon --console plain -Dsonar.projectKey=$$EVALED_SONAR_KEY-api -Dsonar.projectName="$$EVALED_SONAR_NAME APIs" -Dsonar.token=$SONAR_TOKEN -Dsonar.host.url=http://sonarqube-server:9000 -Dsonar.qualitygate.wait=true

  # - name: sonarqube-client-analysis
  #   image: localhost/sonar-scanner:latest
  #   environment:
  #     SONAR_TOKEN:
  #       from_secret: sonarqube-user-token
  #   commands:
  #     - cd client

  #     - BUILT_SONAR_KEY="SONAR_KEY_${DRONE_BRANCH}"
  #     - eval "EVALED_SONAR_KEY=\$$$BUILT_SONAR_KEY"

  #     - BUILT_SONAR_NAME="SONAR_NAME_${DRONE_BRANCH}"
  #     - eval "EVALED_SONAR_NAME=\$$$BUILT_SONAR_NAME"

  #     - sonar-scanner -Dsonar.projectKey=$$EVALED_SONAR_KEY-client -Dsonar.projectName="$$EVALED_SONAR_NAME Client" -Dsonar.token=$SONAR_TOKEN -Dsonar.host.url=http://sonarqube-server:9000 -Dsonar.qualitygate.wait=true

  - name: build-api
    image: localhost/docker:latest
    privileged: true
    volumes:
      - name: socket_path
        path: /var/run/docker.sock
    commands:
      - cd ./api
      - ns=$(cat /etc/resolv.conf  | grep -v '^#' | grep nameserver | awk '{print $$2}')
      - for i in $$ns; do resolved=$(dig +short local-registry @$$i | head -n1); if [ -n "$$resolved" ]; then LOCAL_REGISTRY_ADDRESS=$$resolved; fi done
      - docker build -t $$LOCAL_REGISTRY_ADDRESS:5000/mycelium-local_api:${DRONE_BRANCH}-prod -f Dockerfile.prod --push .

  - name: build-client
    image: localhost/docker:latest
    privileged: true
    volumes:
      - name: socket_path
        path: /var/run/docker.sock
    commands:
      - cd ./client
      - ns=$(cat /etc/resolv.conf  | grep -v '^#' | grep nameserver | awk '{print $$2}')
      - for i in $$ns; do resolved=$(dig +short local-registry @$$i | head -n1); if [ -n "$$resolved" ]; then LOCAL_REGISTRY_ADDRESS=$$resolved; fi done
      - docker build -t $$LOCAL_REGISTRY_ADDRESS:5000/mycelium-local_client:${DRONE_BRANCH}-prod -f Dockerfile.prod --push .

  - name: deployment
    image: appleboy/drone-ssh
    settings:
      host: ${DRONE_BRANCH}-pc
      username: debian
      key:
        from_secret: ssh-deployment-key
      command_timeout: 10m
      script:
        - cd /home/debian
        - docker compose pull
        - docker compose up -d

  - name: mail-on-failure
    image: drillster/drone-email
    settings:
      host: smtp.gmail.com
      username:
        from_secret: gmail-username
      password:
        from_secret: gmail-app-password
      from:
        from_secret: gmail-username
      subject: La etapa ${DRONE_FAILED_STEPS} ha fallado
      recipients:
        - jflores@unis.edu.gt
        - jberganza@unis.edu.gt
        - ${DRONE_COMMIT_AUTHOR_EMAIL}
    when:
      status:
        - failure

trigger:
  branch:
    - dev
    - uat
    - master

volumes:
  - name: socket_path
    host:
      path: /var/run/podman/podman.sock
